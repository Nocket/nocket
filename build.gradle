apply plugin: "java"
apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"
apply plugin: "lesscss"
apply plugin: "maven"
apply plugin: 'com.bmuschko.tomcat'
apply plugin: "jacoco"

ext {
	// current user
	username = System.properties["user.name"]
	
	// define config property to load user specific *build* configuration
	config = loadConfiguration()
}

// using semantic versioning, see http://semver.org/
group = "org.nocket"
archivesBaseName = "nocket"
version = new Version(major: 0, minor: 4, revision: "4")

sourceCompatibility = config.java.source

// static source files for the web app
webAppDirName = "examples/webapp"

// build a release by default
defaultTasks "buildRelease"

sourceSets {
	// library sources -> used for building jar-file
	main {
		java {
			srcDirs = ["src/java"]
		}
		resources {
			srcDirs = ["src/java", "src/resources"] // java directory needed for wicket artifacts
		}
	}
	// example sources -> used for building war-file
	examples {
		java {
			srcDirs = ["examples/java"]
		}
		resources {
			srcDirs = ["examples/java", "examples/resources"] // java directory needed for wicket artifacts
		}
	}
	// unit and selenium tests
	test {
		java {
			srcDirs = ["test/java"]
		}
		resources { 
			srcDirs = ["test/resources"] 
		}	
	}
}

eclipse{
	jdt {
		sourceCompatibility = config.java.source
		targetCompatibility = config.java.target
	}

	project {
		natures = [
			"org.springsource.ide.eclipse.gradle.core.nature",
			"org.eclipse.jdt.core.javanature",
			"org.eclipse.wst.common.modulecore.ModuleCoreNature",
			"org.eclipse.wst.common.project.facet.core.nature"
		]
	}

	classpath {
		defaultOutputDir = file("build/classes-eclipse")
		downloadSources = true

		file {
			withXml {
				def node = it.asNode()

				// add Tomcat Runtime
				node.appendNode("classpathentry", [kind:"con", path: config.eclipse.servletRuntimeClasspath])
					.appendNode("attributes")
					.appendNode("attribute", [name: "owner.project.facets", value: "jst.web"])
				
				// remove web container to enable source.jars in eclipse
				node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
			}
		}
	}

	wtp {
		component {
			//  wtp servlet context
			contextPath = project.name
			deployName = project.name
		}

		facet {
			facet name: "jst.java", version: config.java.source
			facet name: "jst.web",  version: config.java.servlet

			file {
				withXml {
					def node = it.asNode()
					// add Tomcat Runtime
					node.appendNode("runtime", [name: config.eclipse.servletRuntime])
				}
			}
		}
	}
}

// For available options go to https://github.com/houbie/lesscss-gradle-plugin
lessc {
	sourceDir "examples/less"
	include "application.less"
	destinationDir = "examples/webapp/css"

	options.minify = false
	options.sourceMap = true
	options.sourceMapLessInline = true
	options.sourceMapURL = "http://localhost:8080/{$war.baseName}/css/application.map"
}

lesscDaemon {
	description "Use from shell only! Compiles LESS files automatically on every file change."
	lesscTaskName = "lessc"

	engine = config.less.engine
	lesscExecutable = config.less.executable
	interval = config.less.daemonIntervall
}

jacoco {
	toolVersion = "0.7.1.201405082137"
}

jar {
	from sourceSets.main.output
	
	manifest {
		attributes("Implementation-Title": project.name, "Implementation-Version": version)
	}
}

javadoc {
	failOnError = false
	options.encoding = "ISO-8859-15"
}

war {
	dependsOn "lessc"
	appendix =  "examples"
	
	from "examples/webapp"
	classpath sourceSets.examples.runtimeClasspath
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: config.repository.url) {
				authentication(userName: config.repository.user, password: config.repository.password)
			}
  
			snapshotRepository(url: config.repository.snapshot) {
				authentication(userName: config.repository.user, password: config.repository.password)
			}
			
			addFilter('default') {artifact, file ->
				artifact.name == 'nocket'
			}
			
			addFilter('examples') {artifact, file ->
				artifact.name ==~ '.*-examples'
			}
			
			pom.project {
				name 'Nocket'
				description 'Nocket: Naked Objects for Wicket'
				url 'https://github.com/Nocket/'
  
				licenses {
					license {
						name 'The MIT License (MIT)'
						url 'http://opensource.org/licenses/MIT'
					}
				}
			}
		}
	}
}

task integrationServerRun(type: com.bmuschko.gradle.tomcat.tasks.TomcatRunWar) {
	stopPort = config.server.stopPort
	stopKey = config.server.stopKey
	daemon = true
}

task integrationServerStop(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {
	stopPort = config.server.stopPort
	stopKey = config.server.stopKey
}

// all tests are selenium tests
test {
	ignoreFailures = true
	// exclusion of the test suites prevents double execution of test cases.
	exclude '**/*Suite.class'

	dependsOn integrationServerRun
	finalizedBy integrationServerStop
}

tomcat {
	httpPort  = config.server.httpPort
	httpsPort = config.server.httpsPort
}

task cleanResources(type: Delete) {
	description "Deletes all ressources in the build directory"
	
	delete fileTree(dir: "${buildDir}/resources")
}

task javadocJar(type: Jar) {
	description "Assembles a jar archive containing the javadoc files"
	
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	description "Assembles a jar archive containing the source files"
	
	classifier = 'sources'
	from sourceSets.main.allSource
}

task buildSnapshot(dependsOn: ["build"]) {
	description "Assembles the outputs of this project for a SNAPSHOT Release."
}

task buildRelease(dependsOn: ["build"]) {
	description "Assembles the outputs of this project for a Release."
}

task publishRelease {
	description "Publish a RELEASE to a repository"
	
	dependsOn "buildRelease"
	dependsOn "uploadArchives"
}

task publishSnapshot {
	description "Publish a SNAPSHOT to a repository"
	
	dependsOn "buildSnapshot"
	dependsOn "uploadArchives"
}

artifacts {
	archives jar, javadocJar, sourcesJar
}

assemble {
	dependsOn "cleanResources"
	dependsOn "jar"
	dependsOn "war"
}

dependencies {
	def wicketVersion = "6.9.1"
	
	// wicket
	compile "org.apache.wicket:wicket-core:${wicketVersion}"
	compile "org.apache.wicket:wicket-extensions:${wicketVersion}"
	compile "org.apache.wicket:wicket-datetime:${wicketVersion}"
	compile "org.apache.wicket:wicket-devutils:${wicketVersion}"
	compile "org.apache.wicket:wicket-auth-roles:${wicketVersion}"

	providedCompile "javax.servlet:javax.servlet-api:3.1.0"
	
	// utils
	compile "org.nocket:gengui:1.1"
	compile "commons-beanutils:commons-beanutils:1.9.2"
	compile "commons-collections:commons-collections:3.2.2"
	compile "commons-lang:commons-lang:2.6"
	compile "commons-io:commons-io:2.4"
	compile "org.jsoup:jsoup:1.7.3"
	compile "ecs:ecs:1.4.2"
	compile "javax.validation:validation-api:1.1.0.Final"
	compile "org.hibernate:hibernate-validator:4.0.1.GA"
	compile "org.slf4j:slf4j-log4j12:1.6.4"

	// needed for examples
	examplesCompile sourceSets.main.output
	examplesCompile configurations.compile
	
	// testing
	testCompile "junit:junit:4.11"
	
	// Selenium
	testCompile "org.seleniumhq.selenium:selenium-firefox-driver:2.43.1"
	testCompile "org.seleniumhq.selenium:selenium-support:2.43.1"
	testCompile "com.github.detro.ghostdriver:phantomjsdriver:1.1.0"

	// tomcat for selenium
	tomcat "org.apache.tomcat.embed:tomcat-embed-core:${config.server.version}"
	tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${config.server.version}"
	tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${config.server.version}") {
		exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
	}
}

repositories {
	mavenCentral()
	maven { url "https://raw.githubusercontent.com/Nocket/mvn-repository/master/releases" }
}

buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath "com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0"
		classpath "com.bmuschko:gradle-tomcat-plugin:2.0"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.7"
}

gradle.taskGraph.whenReady { taskGraph ->
	
	if( taskGraph.hasTask(buildRelease)) {
		version.release = true
		version.conf = "RELEASE"
	}
	else if (taskGraph.hasTask(buildSnapshot)) {
		version.conf = "SNAPSHOT"
	}
	else {
		version.conf = username
	}
	
	sourceSets.main.resources.srcDir "src/config/${version.configuration}"
	sourceSets.examples.resources.srcDir "examples/config/${version.configuration}"
	
	println "*** release configured for: '${version.conf}'\n"
	
	tasks.withType(JavaCompile) {
		[ compileJava, compileTestJava ]*.options*.encoding = "ISO-8859-15"
		[ compileJava, compileTestJava ]*.options*.warnings = false
	}
}

class Version {
	String major, minor, revision
	boolean release
	String conf = "USER"

	String toString() {
		"$major.$minor.$revision${release ? "" : "-" + conf}"
	}
	
	String getConfiguration() {
		return conf.toLowerCase()
	}
}

def loadConfiguration() {
	mkdir("examples/config/${username}")
	
	File defaultConfigFile = file("$rootDir/config/gradle/default.config")
	File userConfigFile = file("$rootDir/config/gradle/${username}.config")

	def parsedConfig = new ConfigSlurper().parse(defaultConfigFile.toURL())
	
	if(userConfigFile.exists()) {
		def parsedUserConfig = new ConfigSlurper().parse(userConfigFile.toURL())
		parsedConfig = parsedConfig.merge(parsedUserConfig)
		
		println "\n*** using *build* configuration for user: '${username}'"
	} else {
		println "\n*** using default *build* configuration!"
	}
	
	return parsedConfig
}
