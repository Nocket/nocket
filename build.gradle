apply plugin: "java"
apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "eclipse-wtp"
apply plugin: "lesscss"
apply plugin: "announce"

ext {
	// current user
	username = System.properties["user.name"]
	// define config property to load user specific *build* configuration
	config = loadConfiguration()
}

// using semantic versioning, see http://semver.org/
group = "org.nocket"
version = new Version(major: 1, minor: 1, revision: 0)

sourceCompatibility = config.java.source

// static source files for the web app
webAppDirName = "examples/webapp"

// build a release by default
defaultTasks "buildRelease"

sourceSets {
	// library sources -> used for building jar-file
	main {
		java {
			srcDirs = ["src/java", "srcFraglich"]
		}
		resources {
			srcDirs = ["src/java", "srcFraglich", "src/resources"] // java directory needed for wicket artifacts
		}
	}
	// example sources -> used for building war-file
	examples {
		java { 
			srcDirs = ["examples/java"]
		}
		resources {
			srcDirs = ["examples/java", "examples/resources"] // java directory needed for wicket artifacts
		}
	}
	// unit and selenium tests
	test {
		java { 
			srcDirs = ["test/java"] 
		}
		resources { 
			srcDirs = ["test/resources"] 
		}
	}
}

eclipse{
	jdt {
		sourceCompatibility = config.java.source
		targetCompatibility = config.java.target
	}

	project {
		natures = [
			"org.springsource.ide.eclipse.gradle.core.nature",
			"org.eclipse.jdt.core.javanature",
			"org.eclipse.wst.common.modulecore.ModuleCoreNature",
			"org.eclipse.wst.common.project.facet.core.nature"
		]
	}

	classpath {
		defaultOutputDir = file("build/classes-eclipse")
		downloadSources = true
		downloadJavadoc = false

		file {
			withXml {
				def node = it.asNode()

				// add Tomcat Runtime
				node.appendNode("classpathentry", [kind:"con", path: config.eclipse.servletRuntimeClasspath])
					.appendNode("attributes")
					.appendNode("attribute", [name: "owner.project.facets", value: "jst.web"])
			}
		}
	}

	wtp {
		component {
			//  wtp servlet context
			contextPath = project.name
			deployName = project.name
		}

		facet {
			facet name: "jst.java", version: config.java.source
			facet name: "jst.web",  version: config.java.servlet

			file {
				withXml {
					def node = it.asNode()
					// add Tomcat Runtime
					node.appendNode("runtime", [name: config.eclipse.servletRuntime])
				}
			}
		}
	}
}

// For available options go to https://github.com/houbie/lesscss-gradle-plugin
lessc {
	sourceDir "examples/less"
	include "application.less"
	destinationDir = "examples/webapp/css"

	options.minify = false
	options.sourceMap = true
	options.sourceMapLessInline = true
	options.sourceMapURL = "http://localhost:8080/{$war.baseName}/css/application.map"
	
	doLast {
	   def state = didWork ? "finished" : "with error"
       announce.local.send "${project.name}: compling LESS", state
    }
}

lesscDaemon {
	description "Use from shell only! Compiles LESS files automatically on every file change."
    lesscTaskName = "lessc"

    engine = config.less.engine
    lesscExecutable = config.less.executable
	interval = config.less.daemonIntervall
}

jar {
	from sourceSets.main.output

	manifest {
		attributes("Implementation-Title": project.name, "Implementation-Version": version)
	}
}

war {
	dependsOn "lessc"
	baseName "${project.name}-examples"
	
	from "examples/webapp"
	classpath sourceSets.examples.runtimeClasspath
}

assemble {
    dependsOn "cleanResources"
    dependsOn "jar"
    dependsOn "war"
}

repositories { 
	mavenCentral() 
}

dependencies {
	def wicketVersion = "6.9.+"

	compile files("lib/gengui-1.0.jar")

	// wicket
	compile "org.apache.wicket:wicket:${wicketVersion}"
	compile "org.apache.wicket:wicket-extensions:${wicketVersion}"
	compile "org.apache.wicket:wicket-datetime:${wicketVersion}"
	compile "org.apache.wicket:wicket-devutils:${wicketVersion}"
	
	// utils
	compile "commons-beanutils:commons-beanutils:1.9.2"
	compile "commons-collections:commons-collections:3.2.1"
	compile "commons-lang:commons-lang:2.6"
	compile "commons-io:commons-io:2.4"
	compile "org.jsoup:jsoup:1.7.3"
	compile "ecs:ecs:1.4.2"
	compile "javax.validation:validation-api:1.1.0.Final"
	compile "org.hibernate:hibernate-validator:4.0.1.GA"
	compile "org.slf4j:slf4j-log4j12:1.+"

	// jetty?
	compile "org.eclipse.jetty:jetty-webapp:7.5.4.v20111024"

	// needed for examples
	examplesCompile sourceSets.main.output
	examplesCompile configurations.compile
	examplesCompile fileTree("lib/examples")
	
	// testing
	testCompile "junit:junit:4.11"
}

buildscript {
	repositories { 
		mavenCentral() 
	}

	dependencies { 
		classpath "com.github.houbie:lesscss-gradle-plugin:1.0.3-less-1.7.0" 
	}
}

wrapper { 
	gradleVersion = "2.0" 
}

task buildSnapshot(dependsOn: ["build"]) { 
	description "Assembles the outputs of this project for a SNAPSHOT Release."

	doLast { 
		announce.local.send "Snapshot ${project.name}-${version}", "finished"
	} 
}

task buildRelease(dependsOn: ["build"]) {
	description "Assembles the outputs of this project for a Release."
	
    doLast { 
        announce.local.send "Releasing ${project.name}-${version}", "finished"
    } 
}

task cleanResources(type: Delete) {
    delete fileTree(dir: "${buildDir}/resources")
}

gradle.taskGraph.whenReady { taskGraph ->
	if( taskGraph.hasTask(buildRelease)) {
		version.release = true
		version.conf = "RELEASE"
	}
	else if (taskGraph.hasTask(buildSnapshot)) {
		version.conf = "SNAPSHOT"
	}
	else {
		version.conf = username
	}
	
	sourceSets.main.resources.srcDir "src/config/${version.configuration}"
	sourceSets.examples.resources.srcDir "examples/config/${version.configuration}"

	println "*** build configured for: '${version.conf}'\n"
    
	tasks.withType(JavaCompile) {
		compileJava.options.encoding = "ISO-8859-15"
		compileJava.options.warnings = false
	}
}

class Version {
	int major, minor, revision
	boolean release
	String conf = "USER"

	String toString() {
		"$major.$minor.$revision${release ? "" : "-" + conf}"
	}
	
	String getConfiguration() {
		return conf.toLowerCase()
	}
}

def loadConfiguration() {
	mkdir("examples/config/${username}")

	try {
		def configFile = "gradle/" + username + ".config"
		def config = new ConfigSlurper().parse(file(configFile).toURL())

		println "\n*** using *build* configuration for user: '${username}'"
		return config
	}
	catch (all) {
		def configFile = file("gradle/default.config")

        println "\n*** using default *build* configuration!"
		return new ConfigSlurper().parse(configFile.toURL())
	}
}