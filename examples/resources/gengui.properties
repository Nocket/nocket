# This property describes, how gengui handles JFD form files 
# Allowed values are
#   'keep'       Uses existing JFD form files. Gengui creates new JFD files for those 
#				 Domain-Object-Classes that have no corresponding JFD form file. This is
#				 the default mode.
#   'overwrite'  Uses existing JFD form files. Gengui creates new JFD files for those 
#				 Domain-Object-Classes that have no corresponding JFD form file.
#				 If a Domain-Object-Class has been extended independently from its associated form,
#				 the existing JFD form files will be replaced by a new JFD file.
#   'none'       Uses existing JFD form files. Gengui does _not_ create new JFD files for those 
#				 Domain-Object-Classes that have no corresponding JFD form file.
#   'merge'      Uses existing JFD form files.
#                Gengui creates new JFD files for those Domain-Object-Classes that have no corresponding
#				 JFD form file. If a Domain-Object-Class has been extended independently from its 
#				 associated form, the existing JFD form files will be modified accordingly.
#  'silentmerge' Same as 'merge', but new input components in the JFDs will be added invisibly 
#                so that no further manual rework will be necessary. This mode is beneficial, if layouts
#                are principally in a final state and new attributes should only be visible in particular
#                cases
jfd.retention.strategy=overwrite

# Gengui searches for JFD layout files in the project's root directory by default. This
# property allows specifying an alternative path.
jfd.file.path=.

# Optional property instead of 'jfd.file.path'. This makes gengui search the JFDs in the classpath.
# In this case no JFDs can be created or extended, so this property should only be used with
# the 'jfd.retention.strategy=none' property.
jfd.resource.path=

# Supported values
# once: Labels in form files are generated once in one language and are not translated any more. This is the default.
# global: Labels are generated as property references, referring to the global gengui.properties file
# package: Labels are generated as property references, referring to a package-specific property file
# class: Labels are generated as property references, referring to a class-specific property file
# wicket: Labels are generated as property references, referring to the wicket-specific property file
# The property references can be edited with the resource editor of the JFormDesigner.
# ATTENTION: The modes 'class' and 'package' are not yet supported. Mode 'wicket' is valid for DMDWeb only. 
jfd.localization=wicket

# This property is only of interest with a localization mode other than 'once'. It allows to specify if gengui
# should generate property-file-based resources along with localized JFDs. Supported values are
# 'none' - use existing resource bundles but never perform any updates
# 'merge' - add missing resources to the appropriate resource files without changing existing ones
# 'override' - like 'merge' but additionally override any existing resources required by the JFD
# If the property is not set, gengui derives a reasonable value from the jfd.retention.strategy.
#jfd.localization.retention.strategy=merge

# By default HTML help files are searched for in the same directory as the JFD files (see jfd.file.path).
# Following property allows specifying an alternative location.
#htmlhelp.file.path=.
#htmlhelp.file.path=D:/work/less02/strategie/trunk/06_Development/gengui

# If the application runs on AjaxSwing, the help files need to be accessible on the webserver.
# Following property specifies the according URL
htmlhelp.file.url=http://localhost:8040/ajaxswing/client/resources/help/


# Following properties describe in which way FieldOrder- and MethodOrder-Annotations are interpreted.
# Allowed values are:
#   'pedantic'   All attributes have to be listed. All listed attributes have to exist. (Default)
#
#   'easygoing'  GUI elements whose attributes are not listed will be placed randomly under the listed 
#				 attributes. All listed attributes have to exist.
fieldorder.policy=easygoing
methodorder.policy=easygoing

# Limits the amount of open windows. A value <= 0 deactivates this limit.
#open.windows.limit=10
#open.windows.limit.exceeded.title=Too many open windows
#open.windows.limit.exceeded.message=Open windows limit exceeded, please close a window before opening a new one.

# Expects the fully qualified name of the exception handler class. The provided class has to implement
# the interface 'util.SevereExceptionHandler'. 
# Default is 'util.DefaultSevereExceptionHandler'
global.exceptionhandler.class=gengui.util.DefaultSevereExceptionHandler


# Following exception types are not processed graphically if they occur during a method's runtime
# (i.e. there will be no message box, nor will they simply be swallowed if the text is missing).
# They will be encapsulated in a RuntimeException and forwarded to the global ExceptionHandler
# (see 'global.exceptionhandler.class'), instead.
method.exception.forward=de.bertelsmann.container.general.persistence.LockException, test.ForwardException


# Sets the visible time of a status message. Default is 5000 milliseconds
status.staytime=5000

# Specifies the way interactive inputs are synchronized to the model. Possible values are
# 'eager' (default) and 'lazy'. Further information can be found in the according annotation's
# JavaDocs. Those annotations can be used to overwrite the default value that is specified here.
# Web applications should use the 'lazy' mode as a default since frequent synchronization can lead
# to performance problems.
synchronization.mode=eager

# synchronization.eager.auto specifies the waiting time (in milliseconds) before input values are synchronized
# to the model. This property is only reasonable in 'eager' mode. If no value is provided, gengui does not 
# synchronize directly, but as soon as the input field loses its focus.
#synchronization.eager.auto=800

# Following properties define the initial window size. If one of those properties is missing or set to 0,
# the main window will be displayed full screen. Default is 0 x 0.
window.width=1000
window.height=700
help.window.width=480
help.window.height=320

# The window title. Default is empty.
window.title=

# The main menu's width.
# If you use Infonode: the value is relative to the main window (%)
# If you use AjaxSwing: the value is absolute (px)  
menu.width=20

# Position of the tab bar in the RootFrame. Allowed values are 'top' and 'bottom'
tab.position=bottom

# The about.domaintype will be used as default view if there is no other view to show.
# Can be used to display a logo and additional information
# (Works only with Infonode currently)
#about.domaintype=test.About

# Specifies the icon path for the main windows icon. If the path is invalid or the propertie's
# value is empty, the standard Java coffe icon will be used.
#application.icon=img/icon.png

# The used Look & Feel in Swing. Default is none, this means that the native Look & Feel
# will be used.
look.and.feel=com.jgoodies.looks.plastic.PlasticXPLookAndFeel
#look.and.feel=com.sun.java.swing.plaf.windows.WindowsLookAndFeel
#look.and.feel=javax.swing.plaf.metal.MetalLookAndFeel
#look.and.feel=com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel
#look.and.feel=javax.swing.plaf.synth.SynthLookAndFeel

# Specifies whether Infonode should try to display the DockingWindow's tabs according
# to the Look & Feel. If set to 'true', Infonode renders the tabs according to the L&F
# instead of using its own look. However, this mode is said to be experimental and should
# therefore be used with caution as it can possibly lead to visual problems. Default is 'false'
#infonode.render.look.and.feel=true

# Messages are displayed with Swing's modal dialogs by default. To use semi-transparent
# message boxes with rounded corners and smooth fade-effects set this property to 'true'.
fancy.messages=true

# unterdrückt Aspekte, die vom Spine-Framework stammen.
# Following properties can prevent the display of attributes and methods in the GUI whose name matches
# one of the comma-separated regular expressions. This is especially interesting in the context of
# aspect-oriented proceedings (e.g. the patterns .*\\$aop, _getAdvisor and _getInstanceAdvisor aim for
# the use of JBoss AOP, while the pattern _spine.* suppresses aspects that result from the use of the
# spine framework).
method.exclusion.patterns=Ajc$.*, .*\\$aop, _getAdvisor, _getInstanceAdvisor, _getClassAdvisor, _spine.*
field.exclusion.patterns=


# Following property allows explicit exclusion of specific interfaces when searching
# for gengui annotations. In DMD4, for instance,  many GUI-classes are handled by means of AOP.
# The patterns org.jboss.aop.*, spine.generic.* exclude all the interfaces that are implemented 
# by the implicitly affected classes. As scanning the interfaces happens frequently while displaying
# new objects, the right exclusions can save a lot of time.
interface.exclusion.patterns=.*DMDUserContextI, org.jboss.aop.*, spine.generic.*

# Following properties can alter the mask's layout
formlayout.columns.simple=4dlu, 80dlu, 4dlu, 80dlu, 0dlu:grow, 3dlu, 1dlu
formlayout.columns.toplevel=80dlu, 4dlu, 80dlu, 80dlu:grow
formlayout.columns.table= 4dlu, 80dlu, 4dlu, 80dlu, 80dlu:grow, 3dlu, 1dlu 
formlayout.columns.table.panel=	4dlu, fill:80dlu, 4dlu, 80dlu:grow, 3dlu, 1dlu
formlayout.row.simple=fill:14dlu, 4dlu,
formlayout.row.table=fill:100dlu:grow, 2dlu, 
formlayout.row.separator=fill:11dlu, 4dlu,
formlayout.row.buttons=fill:20dlu
formlayout.row.buttons.grow=bottom:20dlu:grow
formlayout.row.panel=fill:pref:grow, 4dlu,
formlayout.row.bottom=,4dlu
button.gap=5
label.alignment=RIGHT

# mandatory.indicator defines a printf-formatting that will be applied to prompts which belong to mandatory input
# fields (either because there is a 'mandatory' annotation or because a primitive datatype is being used).
# By default the prompt will not be changed. Typically an asterisk is used as an indicator.
# Since boolean attributes are mapped to checkboxes and an indicator doesn't really make sense in that case, the
# property 'mandatory.indicator.boolean' can provide a separate format. By default the same format as for other
# datatypes is being used. You can use HTML formatting to provide underlining (e.g. <html><u>%s</u></html>. This
# also works in Swing.
mandatory.indicator=%s*
mandatory.indicator.boolean=%s
 
# Following properties set the masks' colors. Colors can be set as java.awt.Color constants (GRAY, RED, WHITE, etc.)
# or in hexadecimal format (0xRRGGBB). 'color.background' and 'color.foreground' provide defaults. If there are no
# values specified, the system's defaults will be used.
# The error background color ('color.background.error') is noteworthy: If this property is set, but the value is
# empty, gengui does not highlight input errors. 
#color.background=0xFFFFFF
color.background.error=0xFFEEEE
color.background.field=WHITE
#color.background.checkbox=
#color.background.button=
#color.background.combobox=
#color.background.label=
#color.background.table=
color.background.panel=0xF5F5F5
color.background.menu=0xFFFFFF
color.background.prompt=0xE7EBF0
color.background.window=0xFFFFFF

#color.foreground=
#color.foreground.field=
#color.foreground.checkbox=
#color.foreground.button=
#color.foreground.combobox=
#color.foreground.label=
#color.foreground.table=
color.foreground.example=LIGHT_GRAY
color.foreground.line=GRAY
color.foreground.menu=0x000000
color.foreground.prompt=0x2D6387
color.foreground.border=0xafc1d6

# Following optional color is being used as alternate row color in tables. This only works if the specified
# Look & Feel provides this feature. 
color.background.table.alternate=0xF5F5FF

# Following property sets whether strings and filenames should be trimmed by default,
# i.e. leading and trailing whitespace will be cut off prior to synchronizing the input values 
# to the java objects. Default is true. Attribute-specific deviations can be set with @Trim
trim.input=true

# The menu icons for the individual clickable views.
# If AjaxSwing is used, you need to specify a path that is accessible from the web.
# If Infonode is used, you need to specify a path in the classpath.
# The classpath is loaded with the ClassLoader, therefore no leading / needs to be
# provided. Icons are not being scaled, so they need to be saved in the correct size
# in the first place. With the property 'default.icon' you can provide a default icon.
# Otherwise you specify view-specific icons using the FQDN: <CLASS_FQDN>.icon=icon.png
default.icon=images/default.png



# The tab icons for the individual views. The tabs should use smaller icons than the menu.
# You can set a default icon here as well by setting 'default.thumbnail'.
#<CLASS_FQDN>.thumbnail=folder.gif
default.thumbnail=images/default_tab.png

# Default dateformat
dateformat=dd.MM.yyyy

# General validation messages.
# ATTENTION: most messages are not specified here, but in the 
# file org/hibernate/validator/ValidationMessages.properties, which has to be accessible on the classpath.
# A pre-configuration can be found in the library hibernate-validator-4.0.1.GA.jar. A localization is
# possible here as well, e.g. by providing ValidationMessages_de.properties for German messages.
validation.illegal.input=Illegal input value
validation.mandatory=Value missing for mandatory field
validation.number.format=Number format exception
validation.selection=Illegal selection value
validation.general=Correct your inputs to complete the operation
validation.no.object=Nothing selected to apply method to
validation.null.object=The selected object is empty

# Configure the type of representation for field validation errors. Allowed values are
# 'plain': Display the validation error text as plain text right below the field
#   that caused the error. This presentation is recommended for public web sites as
#   it is simple to understand for arbitrary users. This is the default.
# 'tooltip': Displays a small error icon at the upper left corner of the field that caused
#   the error. The error text is the tooltip of the error icon. This presentation is
#   a better alternative for private or expert web-sites like service center applications
#   as it does not spoil the mask layout
validation.error.presentation=plain

# Following properties set the prompts for the individual menu items in a context menu
# that the Infonode RootFrame installs for text components. If a property is missing, the
# corresponding item will not appear in the context menu. If all properties are missing, no
# context menu will be installed. AjaxSwing does not provide a context menu at all.
context.menu.copy=Kopieren
context.menu.paste=Einfügen
context.menu.cut=Ausschneiden
context.menu.mark=Alles auswählen
context.menu.delete=Löschen


# Label names for input fields can be provided in the form "package.Class.<PromptName>=..."
#domaene.Kundentreffer.Kundennummer=Kunden-Nr.

# Enum translations can be provided in the form "package.EnumClas.<ENUM>=..."
#domaene.Kunde$Teilnahmestatus.AKTIV=Aktiver Kunde

# Unit Tests
name.pattern=Names must not include digits
exception.text=Oooops!

# TC001
datatypes.setHaupmaskenstringAusDenGenguiProperties = globalpropertiesLong

# Translated exception text from Generated.testException()
forscher.nocket.page.gen.Generated.normal.exception=normal exception shows in modal message box!

# New properties for the Wicket-based code and HTML generator.
# It is not yet clear if this is the right place for that as the original gengui and the generic web pages
# will ever be completely merged. However, the generic web pages already make use of quite a few gengui
# features and especially of the DomainProperty class which accesses the gengui.property files. So for 
# the time being, this is a good place :-)

# Specifies the directory where to create Java source files with constants for HTML pages
# This property may be overridden by the -g option when running the HTML/code generator from the command line
html.file.path=src

# Specifies the directory where to create HTML and corresponding localization property files
# We have specified the source directory causing the HTML files to appear there when they are
# created on the fly. This is just consistent with the target directory which is usually used
# when running the HTML generation offline. As a consequence, the src directory must be part of
# the classpath to become visible for Wicket and dmdweb.
# An alternative whould be the classes folder or a separate folder for these kinds of files.
src.file.path=src

# Setting this to 'true' causes the HTML generator to produce example table content consisting of the
# table header and two empty lines. This makes the raw HTML to look more realistic and allows to
# specify a few details through the HTML rather than the code, e.g.  the initial sort column and sort order
html.table.example.content=true

# Specifies the HTML layouting strategy. Supported values are
# 'bootstrap': Uses layouting mechanisms from the Bootstrap library, based on classed <div> elements. This
#    is a more sophisticated way which must be fine-tuned by editing the HTML source code.
# 'table': Uses invisible HTML tables. This is a simple pragmatic way which allows fine-tuning with WYSIWYG
#    tools like Microsoft Expression Web 4. If you want to use WYSIWYG editing, remember to set up the
#    parameter html.header.links correctly for a realistic visualization of the raw HTML.
# The default may be overridden when calling the HTML generator from the command line.
html.layout.strategy=bootstrap

# The following links will be added to generated HTML files in order to
# give a good WYSIWYG impression of the page without starting the application
# Especially modifying the HTML layouts with WYSIWYG editors requires this
# The links should be specified relativ to the project's root directory. In this
# case, the generator will automatically added a relativ upwards navigation
# according to the java package, the pages reside in.
html.header.links=resources/webapp/css/bootstrap.css, resources/webapp/css/arvatoStyle.css

# Specifies if HTML files should be cached or not. Allowed values are
# 'none' : Don't cache, this is perfect for development mode
# 'permanent' : Read once and keep forever, this is perfect for production mode
# 'wicket' : Depending on Wicket's runtime mode: DEVELOPMENT->none, DEPLOYMENT->permanent (default)
# 'age' : Read whenever the HTML file has been updated. Nice compromise but works only
#    if the documents are accessible as plain files rather than resources from the class loader
html.document.caching.policy=wicket

# Default: DMDWebPage, but it is very usual to substitute this value by a project-specific class
html.page.base.class=forscher.nocket.page.ForscherPage

# Default: Panel from Wicket which usually doesn't need to be changed 
html.panel.base.class=org.apache.wicket.markup.html.panel.Panel

# In Wicket werden Parameter bevor sie in den Setter geschrieben werden getrimmt und wenn es dann ein Leestring ist zu NULL gemacht. Dies ist
# nur bedingt gut. Es gibt doch Projekte, die ihre Daten, auch wenn sie schlecht sind, behalten wollen. Allerdings kann es sinnvoll sein einen
# richtigen Leerstring zu NULL zu wandeln. Mit diesem Property kann die Strategy festgelegt werden, wie der Wert konvertiert wird.
# none = keine Konvertiertung
# noTrimButEmptyToNull = nur Leerstrings werden zu null (kein Trim)
# trimAndEmptyToNull = Trimmern und danach einen Leerstring zu null konvertieren
dmdtextfield.inputstring.convert.strategy=noTrimButEmptyToNull


# Verwendete Styling-Strategie beim Erstellen der HTML-Seiten und generieren der GUI-Elemente zu den Views.
# Hier wird der komplette Pfad zu der Klasse angegeben.
# Default ist: org.nocket.gen.domain.visitor.html.styling.bootstrap2.Bootstrap2StylingStrategy
nocket.styling.strategy=org.nocket.gen.domain.visitor.html.styling.bootstrap2.Bootstrap2StylingStrategy